<% content_for :title, "Face Login - Command O Conference" %>

<div class="min-h-screen flex flex-col items-center justify-center gap-8 p-6">
  <!-- Header -->
  <div class="text-center">
    <h1 class="text-3xl font-bold text-white mb-2">Face Login</h1>
    <p class="text-gray-400">Position your face in the camera to authenticate</p>
  </div>

  <!-- Camera Container -->
  <div class="relative bg-gray-800 rounded-lg p-4">
    <video id="video" autoplay playsinline muted class="w-80 h-60 bg-gray-900 rounded"></video>
    <canvas id="canvas" class="hidden"></canvas>
    
    <!-- Face detection overlay -->
    <div id="face-overlay" class="absolute inset-4 pointer-events-none hidden">
      <div class="w-full h-full border-2 border-green-500 rounded animate-pulse"></div>
    </div>
  </div>

  <!-- Controls -->
  <div class="flex flex-col items-center gap-4">
    <button id="authenticate-btn" class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed">
      Authenticate with Face
    </button>
    
    <a href="<%= login_path %>" class="text-blue-400 hover:text-blue-300 text-sm">
      Use email login instead
    </a>
  </div>

  <!-- Status Display -->
  <div id="status" class="text-center min-h-[2rem]">
    <p id="status-text" class="text-gray-400 text-sm"></p>
  </div>
</div>

<script type="module">
  const video = document.getElementById('video');
  const canvas = document.getElementById('canvas');
  const statusText = document.getElementById('status-text');
  const faceOverlay = document.getElementById('face-overlay');
  const authenticateBtn = document.getElementById('authenticate-btn');

  let stream = null;
  let isProcessing = false;

  // Initialize camera
  async function initCamera() {
    try {
      statusText.textContent = 'Initializing camera...';
      
      stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'user',
          width: { ideal: 640 },
          height: { ideal: 480 }
        } 
      });
      
      video.srcObject = stream;
      
      video.onloadedmetadata = () => {
        statusText.textContent = 'Camera ready. Click "Authenticate" when ready.';
        authenticateBtn.disabled = false;
      };
      
    } catch (error) {
      console.error('Camera error:', error);
      statusText.textContent = 'Cannot access camera. Please check permissions.';
      statusText.className = 'text-red-400 text-sm';
    }
  }

  // Capture image from video
  function captureImage() {
    const w = video.videoWidth;
    const h = video.videoHeight;
    
    canvas.width = w;
    canvas.height = h;
    
    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0, w, h);
    
    return canvas.toDataURL('image/jpeg', 0.8);
  }

  // Authenticate with captured image
  async function authenticate() {
    if (isProcessing) return;
    
    isProcessing = true;
    authenticateBtn.disabled = true;
    statusText.textContent = 'Capturing image...';
    statusText.className = 'text-blue-400 text-sm';
    
    try {
      const imageData = captureImage();
      
      statusText.textContent = 'Authenticating...';
      faceOverlay.classList.remove('hidden');
      
      const response = await fetch('<%= face_authenticate_path %>', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({ face_image: imageData })
      });
      
      const result = await response.json();
      
      if (result.success && result.authenticated) {
        statusText.textContent = `Welcome back, ${result.user_name}! Redirecting...`;
        statusText.className = 'text-green-400 text-sm';
        
        // Show success state briefly before redirect
        setTimeout(() => {
          window.location.href = '<%= agenda_path %>';
        }, 1500);
        
      } else {
        statusText.textContent = result.error || 'Face not recognized. Please try again.';
        statusText.className = 'text-red-400 text-sm';
        
        setTimeout(() => {
          statusText.textContent = 'Ready to authenticate. Click "Authenticate" when ready.';
          statusText.className = 'text-gray-400 text-sm';
          authenticateBtn.disabled = false;
        }, 3000);
      }
      
    } catch (error) {
      console.error('Authentication error:', error);
      statusText.textContent = 'Network error. Please try again.';
      statusText.className = 'text-red-400 text-sm';
      
      setTimeout(() => {
        statusText.textContent = 'Ready to authenticate. Click "Authenticate" when ready.';
        statusText.className = 'text-gray-400 text-sm';
        authenticateBtn.disabled = false;
      }, 3000);
    } finally {
      isProcessing = false;
      faceOverlay.classList.add('hidden');
    }
  }

  // Event listeners
  authenticateBtn.addEventListener('click', authenticate);
  
  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    if (stream) {
      stream.getTracks().forEach(track => track.stop());
    }
  });

  // Initialize
  initCamera();
</script>
